本文整理了Windows命令行和Linux终端以及Git中设定代理的命令。
以本地HTTP / HTTPS代理127.0.0.1:8118和SOCKS5代理127.0.0.1:1080为例。

Windows命令行代理设置
HTTP代理设置：

设置http_proxy = http：//127.0.0.1：8118
设置https_proxy = http：//127.0.0.1：8118

SOCKS5代理设置：
设置http_proxy = socks5：//127.0.0.1：1080
设置https_proxy = socks5：//127.0.0.1：1080

可以通过echo％http_proxy％命令查看是否设置成功。

取消代理设置：
设置http_proxy =
设置https_proxy =
Linux终端代理设置

临时代理设置

Linux终端设置HTTP代理（只对当前终端有效）：

$ export http_proxy = http：//127.0.0.1：8118
$ export https_proxy = http：//127.0.0.1：8118
Linux中置SOCKS5代理（只对当前终端有效）：

$ export http_proxy = socks5：//127.0.0.1：1080
$ export https_proxy = socks5：//127.0.0.1：1080
设置终端中的wget，curl等都走SOCKS5代理（只对当前终端有效）：

$ export ALL_PROXY = socks5：//127.0.0.1：1080
Linux终端中取消代理设置：

$ unset http_proxy
$ unset https_proxy
$ unset ALL_RPOXY
永久代理设置

将代理命令写入配置文件?/ .profile或?/ .bashrc或?/ .zshrc中：

＃HTTP代理设置
导出http_proxy = http：//127.0.0.1：8118
export https_proxy = http：//127.0.0.1：8118
或

＃SOCKS5代理设置
导出http_proxy = socks5：//127.0.0.1：1080
导出https_proxy = socks5：//127.0.0.1：1080
或

＃强制终端中的wget，curl等都走SOCKS5代理
导出ALL_PROXY = socks5：//127.0.0.1：1080
Git设置代理

代理格式[protocol：//] [user [：password] @] proxyhost [：port] 
参考https://git-scm.com/docs/git-config

设置HTTP代理：

git config --global http.proxy http://127.0.0.1:8118
git config --global https.proxy http://127.0.0.1:8118
设置SOCKS5代理：

git config --global http.proxy socks5：//127.0.0.1：1080
git config --global https.proxy socks5：//127.0.0.1：1080
Git取消代理设置：

git config --global --unset http.proxy
git config --global --unset https.proxy